version: "3.7"
services:
  curriki-postgres:
    image: "postgres"
    container_name: curriki-postgres
    restart: unless-stopped
    tty: true
    ports:
      - ${POSTGRES_EXPOSED_PORT}:5432
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/curriki-postgresdata/
    volumes:
      - curriki-postgresdata:/var/lib/postgresql/data/curriki-postgresdata/
      - ./postgresscripts:/postgresscripts
      - ./postgresscripts/setup.sql:/docker-entrypoint-initdb.d/setup.sql:ro
      - ./postgresscripts/traxdb.sql:/docker-entrypoint-initdb.d/traxdb.sql:ro
      # - ./data/postgres/postgresql.conf:/var/lib/postgresql/data/curriki-postgresdata/abc/postgresql.conf
    networks:
      - curriki-laravel
    
  curriki-mysql:
    image: mariadb
    container_name: curriki-mysql
    restart: unless-stopped
    tty: true
    volumes:
      - curriki-mysqldata:/var/lib/mysql
      - ./mysqlscripts/tsugisetup.sql:/docker-entrypoint-initdb.d/tsugisetup.sql:ro
      # - ./tmp/database/setup.sql:/docker-entrypoint-initdb.d/setup.sql:ro
      # - ./tmp/database/install_db.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./mysqlscripts:/mysqlscripts
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    # command: mysqld --init-file="/tmp/database/install_db.sql"
    ports:
      - ${MYSQL_LOCAL_PORT}:3306
    networks:
      - curriki-laravel
  
  curriki-nginx:
    image: nginx:1.15-alpine
    restart: unless-stopped
    container_name: curriki-nginx
    volumes:
      - ./data/nginx/prod-conf:/etc/nginx/conf.d
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
      - ./data/nginx/log:/var/log/nginx
    ports:
      - 80:80
      - 443:443
    depends_on:
      - curriki-client
      - curriki-api
      # - curriki-trax
      - curriki-tsugi
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    networks:
      - curriki-laravel
    

  certbot:
    image: certbot/certbot:arm64v8-latest
    restart: unless-stopped
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    

    
  curriki-api:
    # build:
    #   dockerfile: ./Dockerfile
    #   context: ./api
    container_name: curriki-api
    image: quay.io/curriki/api:latest
    ports:
      - 9001:8000
      # - 4003:4003
    volumes:
      - ./api/laravel-echo-server.json:/var/www/html/laravel-echo-server.json
      - ./api/storage:/var/www/html/storage
      - ./api/.env:/var/www/html/.env
      # - ./data/certbot/conf:/etc/letsencrypt
      # - ./data/certbot/www:/var/www/certbot
    restart: always
    networks:
      - curriki-laravel
    # deploy:
    #   replicas: 2
    #   update_config:
    #     parallelism: 2
    #     order: start-first
    #     failure_action: rollback
    #     delay: 10s
    #   rollback_config:
    #     parallelism: 0
    #     order: stop-first
    #   restart_policy:
    #     condition: any
    #     delay: 5s
    #     max_attempts: 3
    #     window: 120s
    # healthcheck:
    #   test: sh -c "[ -f /var/www/html/health.ok ]"
    #   interval: 1m
    #   timeout: 3s
    #   start_period: 3m
    #   retries: 3

  # curriki-es-migrate:
  #   # build:
  #   #   dockerfile: ./Dockerfile
  #   #   context: ./api
  #   container_name: curriki-es-migrate
  #   image: quay.io/curriki/es-migrate:latest
  #   ports:
  #     - 9070:8000
  #     # - 4003:4003
  #   volumes:
  #     - ./api/laravel-echo-server.json:/var/www/html/laravel-echo-server.json
  #     - ./api/storage:/var/www/html/storage
  #     - ./api/.env:/var/www/html/.env
  #     - ./data/certbot/conf:/etc/letsencrypt
  #     - ./data/certbot/www:/var/www/certbot
  #     - ./api/migrate.done:/var/www/html/migrate.done
  #   restart: none
  #   depends_on:
  #     - curriki-api
  #   deploy:
  #     replicas: 1
  #     update_config:
  #       parallelism: 2
  #       order: start-first
  #       failure_action: rollback
  #       delay: 10s
  #     rollback_config:
  #       parallelism: 0
  #       order: stop-first
  #     restart_policy:
  #       condition: none
  #   healthcheck:
  #     test: sh -c "[ -f /var/www/html/health.ok ]"
  #     interval: 1m
  #     timeout: 3s
  #     start_period: 3m
  #     retries: 3
  
  # curriki-redis:
  #   # build:
  #   #   dockerfile: ./Dockerfile
  #   #   context: ./api
  #   container_name: curriki-redis
  #   image: quay.io/curriki/redis:latest
  #   ports:
  #     - 4003:4003
  #   volumes:
  #     - ./api/laravel-echo-server.json:/var/www/html/laravel-echo-server.json
  #     - ./api/storage:/var/www/html/storage
  #     - ./api/.env:/var/www/html/.env
  #     - ./data/certbot/conf:/etc/letsencrypt
  #     - ./data/certbot/www:/var/www/certbot
  #   restart: always
  #   deploy:
  #     replicas: 1
  #     update_config:
  #       parallelism: 2
  #       order: start-first
  #       failure_action: rollback
  #       delay: 10s
  #     rollback_config:
  #       parallelism: 0
  #       order: stop-first
  #     restart_policy:
  #       condition: any
  #       delay: 5s
  #       max_attempts: 3
  #       window: 120s
  #   healthcheck:
  #     test: sh -c "[ -f /var/www/html/health.ok ]"
  #     interval: 1m
  #     timeout: 3s
  #     start_period: 3m
  #     retries: 3

  # curriki-admin:
  #   # build:
  #   #   dockerfile: ./Dockerfile
  #   #   context: ./admin
  #   image: quay.io/curriki/admin:latest
  #   container_name: curriki-admin
  #   ports:
  #     - 6001:6000
  #   volumes:
  #     - ./admin/storage:/var/www/html/storage
  #     - ./admin/.env:/var/www/html/.env
  #   restart: always 
  #   deploy:
  #     replicas: 1
  #     update_config:
  #       parallelism: 2
  #       order: start-first
  #       failure_action: rollback
  #       delay: 10s
  #     rollback_config:
  #       parallelism: 0
  #       order: stop-first
  #     restart_policy:
  #       condition: any
  #       delay: 5s
  #       max_attempts: 3
  #       window: 120s
  #   healthcheck:
  #     test: sh -c "[ -f /var/www/html/health.ok ]"
  #     interval: 1m
  #     timeout: 3s
  #     start_period: 3m
  #     retries: 3

  curriki-client:
    # build:
    #   dockerfile: ./Dockerfile
    #   context: ./client
    image: quay.io/curriki/client:latest
    container_name: curriki-client
    volumes:
      - ./client/.env.local:/app/.env.local
    restart: always
    ports:
      - 3000:3000
    networks:
      - curriki-laravel
    # deploy:
    #   replicas: 1
    #   update_config:
    #     parallelism: 2
    #     order: start-first
    #     failure_action: rollback
    #     delay: 10s
    #   rollback_config:
    #     parallelism: 0
    #     order: stop-first
    #   restart_policy:
    #     condition: any
    #     delay: 5s
    #     max_attempts: 3
    #     window: 120s
    # healthcheck:
    #   test: sh -c "[ -f /app/health.ok ]"
    #   interval: 2m
    #   timeout: 3s
    #   start_period: 3m
    #   retries: 3

  # curriki-clientdocs:
  #   # build:
  #   #   dockerfile: ./Dockerfile
  #   #   context: ./clientdocs
  #   image: quay.io/curriki/clientdocs:latest
  #   container_name: curriki-clientdocs
  #   volumes:
  #     - ./clientdocs/.env.local:/app/.env.local
  #   restart: always
  #   ports:
  #     - 2000:2000
  #   deploy:
  #     replicas: 1
  #     update_config:
  #       parallelism: 2
  #       order: start-first
  #       failure_action: rollback
  #       delay: 10s
  #     rollback_config:
  #       parallelism: 0
  #       order: stop-first
  #     restart_policy:
  #       condition: any
  #       delay: 5s
  #       max_attempts: 3
  #       window: 120s
  #   # healthcheck:
  #   #   test: sh -c "[ -f /app/health.ok ]"
  #   #   interval: 2m
  #   #   timeout: 3s
  #   #   start_period: 3m
  #   #   retries: 3

  # curriki-trax:
  #   # build:
  #   #   dockerfile: ./Dockerfile
  #   #   context: ./trax-lrs
  #   image: quay.io/curriki/trax:latest
  #   container_name: curriki-trax
  #   ports:
  #     - 6900:6900
  #   volumes:
  #     - ./trax-lrs/storage:/var/www/html/storage
  #     - ./trax-lrs/.env:/var/www/html/.env
  #     - ./data/certbot/conf:/etc/letsencrypt
  #     - ./data/certbot/www:/var/www/certbot
  #   restart: always
  #   deploy:
  #     replicas: 1
  #     update_config:
  #       parallelism: 2
  #       order: start-first
  #       failure_action: rollback
  #       delay: 10s
  #     rollback_config:
  #       parallelism: 0
  #       order: stop-first
  #     restart_policy:
  #       condition: any
  #       delay: 5s
  #       max_attempts: 3
  #       window: 120s
  #   healthcheck:
  #     test: sh -c "[ -f /var/www/html/health.ok ]"
  #     interval: 30s
  #     timeout: 3s
  #     start_period: 10s
  #     retries: 3

  curriki-tsugi:
    # build:
    #   dockerfile: ./Dockerfile
    #   context: ./tsugi
    image: quay.io/curriki/tsugi:latest
    container_name: curriki-tsugi
    ports:
      - 6300:80
    volumes:
      - ./tsugi/config.php:/var/www/html/tsugi/config.php
      - ./tsugi/mod/curriki/config.php:/var/www/html/tsugi/mod/curriki/config.php
      # - ./data/certbot/conf:/etc/letsencrypt
      # - ./data/certbot/www:/var/www/certbot
    restart: always
    networks:
      - curriki-laravel

  # curriki-moodle:
  #   # build:
  #   #   dockerfile: ./Dockerfile
  #   #   context: ./api
  #   container_name: curriki-moodle
  #   image: quay.io/curriki/moodle:latest
  #   ports:
  #     - 8250:8250
  #     # - 4003:4003
  #   volumes:
  #     - ./moodle/config.php:/var/www/html/config.php
  #     - ./moodle/moodledata:/var/www/moodledata
  #     # - ./data/certbot/conf:/etc/letsencrypt
  #     # - ./data/certbot/www:/var/www/certbot
  #   restart: always
  #   networks:
  #     - curriki-laravel
volumes: #provide volume
    curriki-mysqldata:
      driver: local
      driver_opts:
        o: bind
        type: none
        device: /media/sda1/curriki-db/dbdata/curriki-mysqldata
    curriki-postgresdata:
      driver: local
      driver_opts:
        o: bind
        type: none
        device: /media/sda1/curriki-db/dbdata/curriki-postgresdata
    pgadmin1-data:
      driver: local
      driver_opts:
        o: bind
        type: none
        device: /media/sda1/curriki-db/dbdata/pgadmin1-data

# networks:
#   curriki-laravel:
#     name: curriki-laravel
#     external: true

networks:
  curriki-laravel:
      name: curriki-laravel
      driver: bridge